

feature/one-dropplet
    !Make the characters stick to each other more?
    Document the existing code, refactor code

    ### 1. **Separation of Concerns**:
   - Split the logic for the SDL setup (window creation, font loading, etc.) and the game logic (vertical line generator, event handling, etc.) into different functions or classes.
   - Create helper functions for repetitive tasks such as initializing SDL components, handling events, and cleaning up.

    ### 2. **Encapsulation and Class Responsibilities**:
    - `VerticalLineGenerator` is handling too many things at once (character generation, rendering, updating position). It should focus on its core responsibility—managing the state of the vertical line—while delegating rendering and input processing to other classes or functions.

    ### 3. **Magic Numbers**:
    - Replace magic numbers like `WINDOW_WIDTH`, `WINDOW_HEIGHT`, and `CELL_SIZE` with well-defined constants or configuration settings.

    ### 4. **Error Handling**:
    - Error handling logic could be extracted into a separate function to avoid repetition. We could use a helper function to check for SDL and TTF initialization errors.

    ### 5. **Refactor Event Handling**:
    - Event handling can be moved to a separate function to keep the `main` loop clean and readable.

    ### Refactoring Breakdown:

    1. **Create a `Game` Class**:
    The `Game` class can encapsulate the SDL initialization, the main game loop, and clean-up. This will make the program easier to extend.

    2. **Move SDL Initialization and Cleanup to a Helper Class**:
    A helper function or class can initialize and clean up SDL and TTF resources to avoid repeating the same code in multiple places.

    3. **Modularize Vertical Line Logic**:
    The `VerticalLineGenerator` class should focus on its main responsibility: generating and updating the falling characters. Separating the rendering logic into another function could be helpful.

    ### Key Changes:
    1. **Game Class**: Encapsulates SDL setup, event handling, and the main game loop.
    2. **Separation of Logic**: The vertical line generator (`VerticalLineGenerator`) remains focused on its specific responsibilities.
    3. **Modular Initialization**: Initialization, event handling, and cleanup have been moved to functions within the `Game` class for better organization.
    4. **Error Handling**: `init()` function handles SDL initialization and error checking.


    On each mouse click on the window, i want a new vertical line to spawn at a random location
